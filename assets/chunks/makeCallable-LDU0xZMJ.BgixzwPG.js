const p=Symbol("@@apply"),s=Symbol("@@ctor");function f(r,c){if(typeof r!="object"||r===null||Array.isArray(r))throw new TypeError("instance is not an object");const o=(...e)=>{const t=r[c];if(typeof t!="function")throw new TypeError(`Property "${String(c)}" is not a function`);return t.apply(r,e)};o[p]=o,o[s]=r;const y=r?.constructor?.name;return y&&(o[Symbol.toStringTag]=y),new Proxy(o,{get(e,t,n){return t==="prototype"?Reflect.get(o,t,n):Reflect.get(r,t,r)},set(e,t,n){return Reflect.set(r,t,n)},has(e,t){return Reflect.has(r,t)},deleteProperty(e,t){return Reflect.deleteProperty(r,t)},ownKeys(){return Reflect.ownKeys(r)},getOwnPropertyDescriptor(e,t){return Object.getOwnPropertyDescriptor(r,t)},defineProperty(e,t,n){return Object.defineProperty(r,t,n)}})}export{f as c};
